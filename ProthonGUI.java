/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package prothon;

import java.math.BigInteger;
import javax.swing.JOptionPane;

/**
 *
 * @author Pedja
 */
public class ProthonGUI extends javax.swing.JFrame {

    /**
     * Creates new form ProthonGUI
     */
    public ProthonGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coefficient = new javax.swing.JTextField();
        exponent = new javax.swing.JTextField();
        result = new javax.swing.JLabel();
        test = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prothon");
        setResizable(false);

        coefficient.setText("Input coefficient");
        coefficient.setToolTipText("");

        exponent.setText("Input exponent");
        exponent.setToolTipText("");

        test.setText("Test");
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(test)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(close)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(exponent, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(coefficient, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(coefficient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(test)
                    .addComponent(clear)
                    .addComponent(close))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_closeActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed

		int i=0;
                int j=0;
                
                
                
		String tempa;
                String tempb;
                
                
               
		 
                Object source =evt.getSource();
		 if (source.equals(test))
		 {
                     try{
			 
                     
                         result.setText("");
                     
			 //text1.setText("bang");
			 tempa=coefficient.getText();
			 i=Integer.parseInt(tempa);
                          
                         tempb=exponent.getText();
			 j=Integer.parseInt(tempb);
                         
                         
                         
                         
		     if(BigInteger.valueOf(i).mod(BigInteger.valueOf(2)).equals(BigInteger.ONE)) 
                             {   
                         if( i > 0 )
			 {
                             if(j>2)
                             {
                             
                            
                                if(BigInteger.valueOf(i).compareTo(BigInteger.valueOf(2).pow(j))==-1){
                            result.setText(test(i,j));
                                } else {
                                JOptionPane.showMessageDialog(null, "coefficient must be less than 2^n");
                                coefficient.setText("");
                                exponent.setText("");
                                }
                             } else {
                             JOptionPane.showMessageDialog(null, "exponent must be greater than two");
                              coefficient.setText("");
                              exponent.setText("");
                             }  
			 }
			 else
			 {
			   JOptionPane.showMessageDialog(null, "coefficient must be greater than zero");
			   coefficient.setText("");
                           exponent.setText("");
                           
			 }
                             } else {
                         JOptionPane.showMessageDialog(null, "coefficient must be odd number");
			   coefficient.setText("");
                           exponent.setText("");
                     
                     }
                         
                        
		  
                 } catch(NumberFormatException e){JOptionPane.showMessageDialog(null, "Input number between 1 and 2147483647");
			   coefficient.setText("");
                           exponent.setText("");
                           result.setText("");}
}
                         // TODO add your handling code here:
    }//GEN-LAST:event_testActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
                  coefficient.setText("");
                  exponent.setText("");
                  result.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed
class Polynomial {
    private   BigInteger[] coef ; // coefficients
    private int deg;     // degree of polynomial (0 for the zero polynomial)

    // a * x^b
    public Polynomial(BigInteger a, int b) {
        coef = new BigInteger[b+1];
        for (int i = 0; i < b+1; i++)
        {
            coef[i] = BigInteger.ZERO;
        }
        coef[b] = a;
        deg = degree();
    }

    // return the degree of this polynomial (0 for the zero polynomial)
    public int degree() {
        int d = 0;
        for (int i = 0; i < coef.length; i++)
            if (!(coef[i].equals(BigInteger.ZERO))) d = i;
        return d;
    }

    // return c = a + b
    public Polynomial plus(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(BigInteger.ZERO, Math.max(a.deg, b.deg));
        for (int i = 0; i <= a.deg; i++) c.coef[i] =c.coef[i].add(a.coef[i]);
        for (int i = 0; i <= b.deg; i++) c.coef[i]= c.coef[i].add(b.coef[i]);
        c.deg = c.degree();
        return c;
    }

    // return (a - b)
    public Polynomial minus(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(BigInteger.ZERO, Math.max(a.deg, b.deg));
        for (int i = 0; i <= a.deg; i++) c.coef[i] =c.coef[i].add(a.coef[i]);
        for (int i = 0; i <= b.deg; i++) c.coef[i] =c.coef[i].subtract(b.coef[i]);
        c.deg = c.degree();
        return c;
    }

    // return (a * b)
    public Polynomial times(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(BigInteger.ZERO, a.deg + b.deg);
        for (int i = 0; i <= a.deg; i++)
            for (int j = 0; j <= b.deg; j++)
               c.coef[i+j]= c.coef[i+j].add(a.coef[i].multiply(b.coef[j]));
        c.deg = c.degree();
        return c;
    }

    // return a(b(x))  - compute using Horner's method
   


    // do a and b represent the same polynomial?
    


    // use Horner's method to compute and return the polynomial evaluated at x
     public BigInteger evaluate(BigInteger x) {
        BigInteger p = BigInteger.ZERO;
        for (int i = deg; i >= 0; i--)
            p = coef[i].add(x .multiply(p) );
        return p;
    }

    

    
 }

public BigInteger poly(int M , BigInteger x) {
    int N=M+1;
        Polynomial[] T  = new Polynomial[Math.max(2, N)];   
        T[0]            = new Polynomial(BigInteger.valueOf(2), 0);             
        T[1]            = new Polynomial(BigInteger.ONE, 1);             
        Polynomial twox = new Polynomial(BigInteger.ONE, 1);             

        
        for (int n = 2; n < N; n++) {
            Polynomial temp1 = twox.times(T[n-1]);
            T[n] = temp1.minus(T[n-2]);
        }

        // print results
        
            return T[M].evaluate(x);
       
      
   }

public String test(int k , int n) {
       
       BigInteger p=((BigInteger.valueOf(k)).multiply(BigInteger.valueOf(2).pow(n))).add(BigInteger.ONE);
       
     
       
       if((BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.ONE) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(2))) || BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(4)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(5))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(3)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(11))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(3)) || BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(5)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(13))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(4)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(17))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(5)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(19))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.ZERO))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(23))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.ONE) || BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(3)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(25))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.ZERO) || BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(2)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(29))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.ONE) || BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(5)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(31))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(2)))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(37))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.ZERO) || BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(4)))
              || (BigInteger.valueOf(k).mod(BigInteger.valueOf(42)).equals(BigInteger.valueOf(41))) && (BigInteger.valueOf(n).mod(BigInteger.valueOf(6)).equals(BigInteger.ONE))) {
       
       
       
       BigInteger s=poly(k,BigInteger.valueOf(5));
       for(int i=1 ; i<=n-2;i++){
       s=s.multiply(s).subtract(BigInteger.valueOf(2)).mod(p);
       }
       
       if(s.equals(BigInteger.ZERO)){
       return "number is prime";
       } else {
       return "number is composite";
       }
       
       } else {
           
           if((BigInteger.valueOf(k).mod(BigInteger.valueOf(6)).equals(BigInteger.ONE) && (BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.ONE)||BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.valueOf(7)))) && BigInteger.valueOf(n).mod(BigInteger.valueOf(4)).equals(BigInteger.ZERO)
            ||   (BigInteger.valueOf(k).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(5)) && (BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.ONE)||BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.valueOf(3)))) && BigInteger.valueOf(n).mod(BigInteger.valueOf(4)).equals(BigInteger.ONE)
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(6)).equals(BigInteger.ONE) && (BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.valueOf(3))||BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.valueOf(9)))) && BigInteger.valueOf(n).mod(BigInteger.valueOf(4)).equals(BigInteger.valueOf(2))
               || (BigInteger.valueOf(k).mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(5)) && (BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.valueOf(7))||BigInteger.valueOf(k).mod(BigInteger.valueOf(10)).equals(BigInteger.valueOf(9)))) && BigInteger.valueOf(n).mod(BigInteger.valueOf(4)).equals(BigInteger.valueOf(3))){
            
       
               BigInteger s=poly(k,BigInteger.valueOf(8));
               for(int i=1 ; i<=n-2;i++){
       s=s.multiply(s).subtract(BigInteger.valueOf(2)).mod(p);
       }
       
       if(s.equals(BigInteger.ZERO)){
       return "number is prime";
       } else {
       return "number is composite";
       }
       
           } else{
               
               JOptionPane.showMessageDialog(null, "Input another coefficient and exponent");
               coefficient.setText("");
               exponent.setText("");
               
           return null ;
       }
       }
  
       
       
  
   }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProthonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProthonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProthonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProthonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProthonGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton close;
    private javax.swing.JTextField coefficient;
    private javax.swing.JTextField exponent;
    private javax.swing.JLabel result;
    private javax.swing.JButton test;
    // End of variables declaration//GEN-END:variables
}
